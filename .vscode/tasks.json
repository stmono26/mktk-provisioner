{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Install Dependencies",
            "type": "shell",
            "command": "python3",
            "args": ["-m", "pip", "install", "-r", "requirements.txt"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            },
            "problemMatcher": []
        },
        {
            "label": "Run Mikrotik Provisioner",
            "type": "shell",
            "command": "python3",
            "args": ["app.py"],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            },
            "isBackground": true,
            "problemMatcher": {
                "owner": "python",
                "fileLocation": ["relative", "${workspaceFolder}"],
                "pattern": {
                    "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
                    "file": 1,
                    "line": 2,
                    "column": 3,
                    "severity": 4,
                    "message": 5
                }
            },
            "options": {
                "env": {
                    "FLASK_ENV": "development",
                    "FLASK_DEBUG": "1"
                }
            }
        },
        {
            "label": "Run Development Server",
            "type": "shell",
            "command": "python3",
            "args": ["-m", "flask", "run", "--host=0.0.0.0", "--port=5000", "--debug"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            },
            "isBackground": true,
            "problemMatcher": [],
            "options": {
                "env": {
                    "FLASK_APP": "app.py",
                    "FLASK_ENV": "development",
                    "FLASK_DEBUG": "1"
                }
            }
        },
        {
            "label": "Test Network Discovery",
            "type": "shell",
            "command": "python3",
            "args": ["-c", "from modules.network_discovery import NetworkDiscovery; nd = NetworkDiscovery(); print(f'Server IP: {nd.get_server_ip()}'); print('Testing arp-scan...'); import subprocess; result = subprocess.run(['arp-scan', '--help'], capture_output=True); print('arp-scan available:', result.returncode == 0)"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            },
            "problemMatcher": []
        },
        {
            "label": "Check Dependencies",
            "type": "shell",
            "command": "python3",
            "args": ["-c", "import flask, paramiko; print('âœ… All dependencies installed successfully')"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            },
            "problemMatcher": []
        },
        {
            "label": "Setup Virtual Environment",
            "type": "shell",
            "command": "python3",
            "args": ["-m", "venv", "venv"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            },
            "problemMatcher": []
        },
        {
            "label": "Activate Venv and Install Dependencies",
            "type": "shell",
            "command": "bash",
            "args": ["-c", "source venv/bin/activate && python -m pip install --upgrade pip && pip install -r requirements.txt"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            },
            "problemMatcher": []
        },
        {
            "label": "Run with Virtual Environment",
            "type": "shell",
            "command": "bash",
            "args": ["-c", "source venv/bin/activate && python app.py"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            },
            "isBackground": true,
            "problemMatcher": [],
            "options": {
                "env": {
                    "FLASK_ENV": "development",
                    "FLASK_DEBUG": "1"
                }
            }
        }
    ]
}
